/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function main(a: number, b: number): number;
export function spSkeleton_dispose(a: number): void;
export function spSkin_dispose(a: number): void;
export function spAnimationState_dispose(a: number): void;
export function spSkeletonClipping_dispose(a: number): void;
export function spSkeletonClipping_clipStart(a: number, b: number, c: number): number;
export function spVertexAttachment_computeWorldVertices(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function spRegionAttachment_computeWorldVertices(a: number, b: number, c: number, d: number, e: number): void;
export function spSkeletonClipping_clipTriangles(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function spAnimationState_update(a: number, b: number): void;
export function spAnimationState_apply(a: number, b: number): number;
export function spSkeleton_updateWorldTransform(a: number): void;
export function spAnimationStateData_setMix(a: number, b: number, c: number, d: number): void;
export function spAtlasAttachmentLoader_create(a: number): number;
export function spSkeletonJson_readSkeletonData(a: number, b: number): number;
export function spSkeletonBinary_dispose(a: number): void;
export function spSkeletonBinary_readSkeletonData(a: number, b: number, c: number): number;
export function spAtlas_create(a: number, b: number, c: number, d: number): number;
export function spSkin_create(a: number): number;
export function spSkin_addSkin(a: number, b: number): void;
export function spSkin_copySkin(a: number, b: number): void;
export function spSkeleton_setSkin(a: number, b: number): void;
export function spSkeletonData_dispose(a: number): void;
export function spAtlas_dispose(a: number): void;
export function spine_isspace(a: number): number;
export function spine_isdigit(a: number): number;
export function spine_isalpha(a: number): number;
export function spine_isupper(a: number): number;
export function spine_strlen(a: number): number;
export function spine_strcmp(a: number, b: number): number;
export function spine_strncmp(a: number, b: number, c: number): number;
export function spine_strcasecmp(a: number, b: number): number;
export function spine_strcpy(a: number, b: number): number;
export function spine_strncat(a: number, b: number, c: number): number;
export function spine_strtol(a: number, b: number, c: number): number;
export function spine_strtoul(a: number, b: number, c: number): number;
export function spine_strrchr(a: number, b: number): number;
export function spine_rand(): number;
export function spine_sqrtf(a: number): number;
export function spine_malloc(a: number): number;
export function spine_realloc(a: number, b: number): number;
export function spine_free(a: number): void;
export function spine_memcpy(a: number, b: number, c: number): number;
export function spine_memmove(a: number, b: number, c: number): number;
export function spine_memset(a: number, b: number, c: number): number;
export function spine_fopen(a: number, b: number): number;
export function spine_fclose(a: number): number;
export function spine_fread(a: number, b: number, c: number, d: number): number;
export function spine_fseek(a: number, b: number, c: number): number;
export function spine_ftell(a: number): number;
export function isspace_(a: number): number;
export function spPropertyIdArray_create(a: number): number;
export function spPropertyIdArray_setSize(a: number, b: number): number;
export function spPropertyIdArray_ensureCapacity(a: number, b: number): void;
export function spPropertyIdArray_add(a: number, b: number): void;
export function spPropertyIdArray_addAll(a: number, b: number): void;
export function spPropertyIdArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function spPropertyIdArray_removeAt(a: number, b: number): void;
export function spPropertyIdArray_contains(a: number, b: number): number;
export function spPropertyIdArray_pop(a: number): number;
export function spPropertyIdArray_peek(a: number): number;
export function spTimelineArray_create(a: number): number;
export function spAnimation_create(a: number, b: number, c: number): number;
export function spAnimation_dispose(a: number): void;
export function spTimeline_dispose(a: number): void;
export function spAnimation_hasTimeline(a: number, b: number, c: number): number;
export function spAnimation_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function _spTimeline_init(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spTimeline_setBezier(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number): void;
export function spTimeline_getDuration(a: number): number;
export function _spCurveTimeline_init(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function _spCurveTimeline_dispose(a: number): void;
export function _spCurveTimeline_setBezier(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number): void;
export function _spCurveTimeline_getBezierValue(a: number, b: number, c: number, d: number, e: number): number;
export function spCurveTimeline_setLinear(a: number, b: number): void;
export function spCurveTimeline_setStepped(a: number, b: number): void;
export function spCurveTimeline1_getCurveValue(a: number, b: number): number;
export function spCurveTimeline2_setFrame(a: number, b: number, c: number, d: number, e: number): void;
export function _spRotateTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spRotateTimeline_create(a: number, b: number, c: number): number;
export function _spTranslateTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spTranslateTimeline_create(a: number, b: number, c: number): number;
export function _spTranslateXTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spTranslateXTimeline_create(a: number, b: number, c: number): number;
export function _spTranslateYTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spTranslateYTimeline_create(a: number, b: number, c: number): number;
export function _spScaleTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spScaleTimeline_create(a: number, b: number, c: number): number;
export function _spScaleXTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spScaleXTimeline_create(a: number, b: number, c: number): number;
export function _spScaleYTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spScaleYTimeline_create(a: number, b: number, c: number): number;
export function _spShearTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spShearTimeline_create(a: number, b: number, c: number): number;
export function _spShearXTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spShearXTimeline_create(a: number, b: number, c: number): number;
export function _spShearYTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spShearYTimeline_create(a: number, b: number, c: number): number;
export function _spRGBATimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spRGBATimeline_create(a: number, b: number, c: number): number;
export function spRGBATimeline_setFrame(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function _spRGBTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spRGBTimeline_create(a: number, b: number, c: number): number;
export function _spAlphaTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spAlphaTimeline_create(a: number, b: number, c: number): number;
export function spAlphaTimeline_setFrame(a: number, b: number, c: number, d: number): void;
export function _spRGBA2Timeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spRGBA2Timeline_create(a: number, b: number, c: number): number;
export function spRGBA2Timeline_setFrame(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function _spRGB2Timeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spRGB2Timeline_create(a: number, b: number, c: number): number;
export function spRGB2Timeline_setFrame(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function _spAttachmentTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function _spAttachmentTimeline_dispose(a: number): void;
export function spAttachmentTimeline_create(a: number, b: number): number;
export function spAttachmentTimeline_setFrame(a: number, b: number, c: number, d: number): void;
export function _spDeformTimeline_setBezier(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number): void;
export function _spDeformTimeline_getCurvePercent(a: number, b: number, c: number): number;
export function _spDeformTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function _spDeformTimeline_dispose(a: number): void;
export function spDeformTimeline_create(a: number, b: number, c: number, d: number, e: number): number;
export function spDeformTimeline_setFrame(a: number, b: number, c: number, d: number): void;
export function _spSequenceTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function _spSequenceTimeline_dispose(a: number): void;
export function spSequenceTimeline_create(a: number, b: number, c: number): number;
export function spSequenceTimeline_setFrame(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function _spEventTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function _spEventTimeline_dispose(a: number): void;
export function spEventTimeline_create(a: number): number;
export function spEventTimeline_setFrame(a: number, b: number, c: number): void;
export function _spDrawOrderTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function _spDrawOrderTimeline_dispose(a: number): void;
export function spDrawOrderTimeline_create(a: number, b: number): number;
export function spDrawOrderTimeline_setFrame(a: number, b: number, c: number, d: number): void;
export function _spIkConstraintTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spIkConstraintTimeline_create(a: number, b: number, c: number): number;
export function spIkConstraintTimeline_setFrame(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function _spTransformConstraintTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spTransformConstraintTimeline_create(a: number, b: number, c: number): number;
export function spTransformConstraintTimeline_setFrame(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function _spPathConstraintPositionTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spPathConstraintPositionTimeline_create(a: number, b: number, c: number): number;
export function _spPathConstraintSpacingTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spPathConstraintSpacingTimeline_create(a: number, b: number, c: number): number;
export function _spPathConstraintMixTimeline_apply(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spPathConstraintMixTimeline_create(a: number, b: number, c: number): number;
export function spPathConstraintMixTimeline_setFrame(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function spTrackEntryArray_create(a: number): number;
export function spAnimationState_disposeStatics(): void;
export function _spEventQueue_create(a: number): number;
export function _spEventQueue_free(a: number): void;
export function _spEventQueue_ensureCapacity(a: number, b: number): void;
export function _spEventQueue_addEntry(a: number, b: number): void;
export function _spEventQueue_start(a: number, b: number): void;
export function _spEventQueue_interrupt(a: number, b: number): void;
export function _spEventQueue_end(a: number, b: number): void;
export function _spEventQueue_dispose(a: number, b: number): void;
export function _spEventQueue_complete(a: number, b: number): void;
export function _spEventQueue_event(a: number, b: number, c: number): void;
export function _spEventQueue_clear(a: number): void;
export function _spEventQueue_drain(a: number): void;
export function _spAnimationState_disposeTrackEntry(a: number): void;
export function _spAnimationState_enableQueue(a: number): void;
export function _spAnimationState_disableQueue(a: number): void;
export function _spAnimationState_disposeTrackEntries(a: number, b: number): void;
export function spAnimationState_create(a: number): number;
export function _spAnimationState_updateMixingFrom(a: number, b: number, c: number): number;
export function _spAnimationState_setCurrent(a: number, b: number, c: number, d: number): void;
export function _spTrackEntry_computeHold(a: number, b: number): void;
export function _spAnimationState_applyMixingFrom(a: number, b: number, c: number, d: number): number;
export function _spAnimationState_applyRotateTimeline(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function _spAnimationState_queueEvents(a: number, b: number, c: number): void;
export function _spAnimationState_applyAttachmentTimeline(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function spAnimationState_clearTracks(a: number): void;
export function spAnimationState_clearTrack(a: number, b: number): void;
export function spAnimationState_setAnimationByName(a: number, b: number, c: number, d: number): number;
export function spAnimationState_setAnimation(a: number, b: number, c: number, d: number): number;
export function _spAnimationState_trackEntry(a: number, b: number, c: number, d: number, e: number): number;
export function spAnimationState_addAnimationByName(a: number, b: number, c: number, d: number, e: number): number;
export function spAnimationState_addAnimation(a: number, b: number, c: number, d: number, e: number): number;
export function spAnimationState_setEmptyAnimation(a: number, b: number, c: number): number;
export function spAnimationState_addEmptyAnimation(a: number, b: number, c: number, d: number): number;
export function spAnimationState_setEmptyAnimations(a: number, b: number): void;
export function _spAnimationState_expandToIndex(a: number, b: number): number;
export function spAnimationState_clearNext(a: number, b: number): void;
export function _spAnimationState_animationsChanged(a: number): void;
export function _spAnimationState_resizeTimelinesRotation(a: number, b: number): number;
export function _spAnimationState_ensureCapacityPropertyIDs(a: number, b: number): void;
export function _spAnimationState_addPropertyID(a: number, b: number): number;
export function _spAnimationState_addPropertyIDs(a: number, b: number, c: number): number;
export function spAnimationState_getCurrent(a: number, b: number): number;
export function spAnimationState_clearListenerNotifications(a: number): void;
export function spTrackEntry_getAnimationTime(a: number): number;
export function spTrackEntry_getTrackComplete(a: number): number;
export function _ToEntry_create(a: number, b: number): number;
export function _FromEntry_create(a: number): number;
export function _FromEntry_dispose(a: number): void;
export function spAnimationStateData_create(a: number): number;
export function spAnimationStateData_dispose(a: number): void;
export function spAnimationStateData_setMixByName(a: number, b: number, c: number, d: number): void;
export function spAnimationStateData_getMix(a: number, b: number, c: number): number;
export function spFloatArray_create(a: number): number;
export function spFloatArray_add(a: number, b: number): void;
export function spFloatArray_addAll(a: number, b: number): void;
export function spFloatArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function spFloatArray_removeAt(a: number, b: number): void;
export function spFloatArray_contains(a: number, b: number): number;
export function spFloatArray_pop(a: number): number;
export function spFloatArray_peek(a: number): number;
export function spIntArray_create(a: number): number;
export function spIntArray_contains(a: number, b: number): number;
export function spShortArray_create(a: number): number;
export function spShortArray_setSize(a: number, b: number): number;
export function spShortArray_ensureCapacity(a: number, b: number): void;
export function spShortArray_add(a: number, b: number): void;
export function spShortArray_addAll(a: number, b: number): void;
export function spShortArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function spShortArray_removeAt(a: number, b: number): void;
export function spShortArray_contains(a: number, b: number): number;
export function spShortArray_pop(a: number): number;
export function spShortArray_peek(a: number): number;
export function spUnsignedShortArray_create(a: number): number;
export function spUnsignedShortArray_add(a: number, b: number): void;
export function spUnsignedShortArray_contains(a: number, b: number): number;
export function spUnsignedShortArray_pop(a: number): number;
export function spUnsignedShortArray_peek(a: number): number;
export function spArrayFloatArray_create(a: number): number;
export function spArrayFloatArray_dispose(a: number): void;
export function spArrayFloatArray_clear(a: number): void;
export function spArrayFloatArray_setSize(a: number, b: number): number;
export function spArrayFloatArray_ensureCapacity(a: number, b: number): void;
export function spArrayFloatArray_add(a: number, b: number): void;
export function spArrayFloatArray_addAll(a: number, b: number): void;
export function spArrayFloatArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function spArrayFloatArray_removeAt(a: number, b: number): void;
export function spArrayFloatArray_contains(a: number, b: number): number;
export function spArrayFloatArray_pop(a: number): number;
export function spArrayFloatArray_peek(a: number): number;
export function spArrayShortArray_create(a: number): number;
export function spKeyValueArray_create(a: number): number;
export function spKeyValueArray_setSize(a: number, b: number): number;
export function spKeyValueArray_ensureCapacity(a: number, b: number): void;
export function spKeyValueArray_add(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function spKeyValueArray_addAll(a: number, b: number): void;
export function spKeyValueArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function spKeyValueArray_contains(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function spKeyValueArray_pop(a: number, b: number): void;
export function spKeyValueArray_peek(a: number, b: number): void;
export function spAtlasPage_create(a: number, b: number): number;
export function spAtlasPage_dispose(a: number): void;
export function _spAtlasPage_disposeTexture(a: number): void;
export function spAtlasRegion_create(): number;
export function spAtlasRegion_dispose(a: number): void;
export function indexOf(a: number, b: number, c: number): number;
export function _spAtlasPage_createTexture(a: number, b: number): void;
export function spAtlas_createFromFile(a: number, b: number): number;
export function _spUtil_readFile(a: number, b: number): number;
export function spAtlas_findRegion(a: number, b: number): number;
export function _spAtlasAttachmentLoader_createAttachment(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function _spAttachmentLoader_setError(a: number, b: number, c: number): void;
export function _spBoundingBoxAttachment_dispose(a: number): void;
export function _spClippingAttachment_copy(a: number): number;
export function _spAttachment_init(a: number, b: number, c: number, d: number, e: number): void;
export function _spPointAttachment_dispose(a: number): void;
export function _spPointAttachment_copy(a: number): number;
export function _spPathAttachment_dispose(a: number): void;
export function _spPathAttachment_copy(a: number): number;
export function _spBoundingBoxAttachment_copy(a: number): number;
export function _spMeshAttachment_dispose(a: number): void;
export function _spMeshAttachment_copy(a: number): number;
export function _spRegionAttachment_dispose(a: number): void;
export function _spRegionAttachment_copy(a: number): number;
export function spAttachment_dispose(a: number): void;
export function _spAttachmentLoader_setUnknownTypeError(a: number, b: number): void;
export function spSequence_create(a: number): number;
export function _spVertexAttachment_deinit(a: number): void;
export function spMeshAttachment_newLinkedMesh(a: number): number;
export function spVertexAttachment_copyTo(a: number, b: number): void;
export function spSequence_getPath(a: number, b: number, c: number, d: number): void;
export function spMeshAttachment_updateRegion(a: number): void;
export function _spAttachmentLoader_deinit(a: number): void;
export function _spAttachment_deinit(a: number): void;
export function spAttachment_copy(a: number): number;
export function _spAttachmentLoader_init(a: number, b: number, c: number, d: number, e: number): void;
export function spAttachmentLoader_dispose(a: number): void;
export function spAttachmentLoader_createAttachment(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function spAttachmentLoader_configureAttachment(a: number, b: number): void;
export function spAttachmentLoader_disposeAttachment(a: number, b: number): void;
export function spBone_setYDown(a: number): void;
export function spBone_isYDown(): number;
export function spBone_create(a: number, b: number, c: number): number;
export function spBone_dispose(a: number): void;
export function spBone_update(a: number): void;
export function spBone_updateWorldTransformWith(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function spBone_updateWorldTransform(a: number): void;
export function spBone_setToSetupPose(a: number): void;
export function spBone_getWorldRotationX(a: number): number;
export function spBone_getWorldRotationY(a: number): number;
export function spBone_getWorldScaleX(a: number): number;
export function spBone_getWorldScaleY(a: number): number;
export function spBone_updateAppliedTransform(a: number): void;
export function spBone_worldToLocal(a: number, b: number, c: number, d: number, e: number): void;
export function spBone_localToWorld(a: number, b: number, c: number, d: number, e: number): void;
export function spBone_worldToLocalRotation(a: number, b: number): number;
export function spBone_localToWorldRotation(a: number, b: number): number;
export function spBone_rotateWorld(a: number, b: number): void;
export function spBoneData_create(a: number, b: number, c: number): number;
export function spBoundingBoxAttachment_create(a: number): number;
export function spClippingAttachment_create(a: number): number;
export function spColor_create(): number;
export function spColor_dispose(a: number): void;
export function spColor_setFromFloats(a: number, b: number, c: number, d: number, e: number): void;
export function spColor_setFromFloats3(a: number, b: number, c: number, d: number): void;
export function spColor_setFromColor(a: number, b: number): void;
export function spColor_setFromColor3(a: number, b: number): void;
export function spColor_addColor(a: number, b: number): void;
export function spColor_addFloats(a: number, b: number, c: number, d: number, e: number): void;
export function spColor_addFloats3(a: number, b: number, c: number, d: number): void;
export function spColor_clamp(a: number): void;
export function spDebug_printSkeletonData(a: number): void;
export function spDebug_printBoneData(a: number): void;
export function spDebug_printAnimation(a: number): void;
export function spDebug_printTimeline(a: number): void;
export function _spDebug_printTimelineBase(a: number): void;
export function spDebug_printFloats(a: number, b: number): void;
export function _spDebug_printCurveTimeline(a: number): void;
export function spDebug_printBoneDatas(a: number, b: number): void;
export function spDebug_printSkeleton(a: number): void;
export function spDebug_printBone(a: number): void;
export function spDebug_printBones(a: number, b: number): void;
export function spEvent_create(a: number, b: number): number;
export function spEventData_create(a: number): number;
export function spEventData_dispose(a: number): void;
export function spIkConstraint_create(a: number, b: number): number;
export function spIkConstraint_update(a: number): void;
export function spIkConstraint_apply1(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function spIkConstraint_apply2(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function spIkConstraintData_create(a: number): number;
export function spIkConstraintData_dispose(a: number): void;
export function Json_getError(): number;
export function Json_dispose(a: number): void;
export function Json_create(a: number): number;
export function Json_getItem(a: number, b: number): number;
export function Json_getItemAtIndex(a: number, b: number): number;
export function Json_getString(a: number, b: number, c: number): number;
export function Json_getFloat(a: number, b: number, c: number): number;
export function Json_getInt(a: number, b: number, c: number): number;
export function spMeshAttachment_create(a: number): number;
export function spMeshAttachment_setParentMesh(a: number, b: number): void;
export function spPathAttachment_create(a: number): number;
export function spPathConstraint_create(a: number, b: number): number;
export function spPathConstraint_dispose(a: number): void;
export function spPathConstraint_update(a: number): void;
export function spPathConstraint_computeWorldPositions(a: number, b: number, c: number, d: number): number;
export function spPathConstraintData_create(a: number): number;
export function spPointAttachment_create(a: number): number;
export function spPointAttachment_computeWorldPosition(a: number, b: number, c: number, d: number): void;
export function spPointAttachment_computeWorldRotation(a: number, b: number): number;
export function spRegionAttachment_create(a: number): number;
export function spRegionAttachment_updateRegion(a: number): void;
export function spTextureRegionArray_create(a: number): number;
export function spSequence_copy(a: number): number;
export function spSequence_apply(a: number, b: number, c: number): void;
export function spSkeleton_create(a: number): number;
export function spSlot_create(a: number, b: number): number;
export function spTransformConstraint_create(a: number, b: number): number;
export function spSkeleton_updateCache(a: number): void;
export function spSlot_setToSetupPose(a: number): void;
export function _spTransformConstraint_applyAbsoluteWorld(a: number): void;
export function _spTransformConstraint_applyRelativeWorld(a: number): void;
export function _spTransformConstraint_applyRelativeLocal(a: number): void;
export function _spTransformConstraint_applyAbsoluteLocal(a: number): void;
export function spSkeleton_updateWorldTransformWith(a: number, b: number): void;
export function spSkeleton_setToSetupPose(a: number): void;
export function spSkeleton_setBonesToSetupPose(a: number): void;
export function spSkeleton_setSlotsToSetupPose(a: number): void;
export function spSkeleton_findBone(a: number, b: number): number;
export function spSkeleton_findSlot(a: number, b: number): number;
export function spSkeleton_setSkinByName(a: number, b: number): number;
export function spSkeleton_getAttachmentForSlotName(a: number, b: number, c: number): number;
export function spSkeleton_getAttachmentForSlotIndex(a: number, b: number, c: number): number;
export function spSkeleton_setAttachment(a: number, b: number, c: number): number;
export function spSkeleton_findIkConstraint(a: number, b: number): number;
export function spSkeleton_findTransformConstraint(a: number, b: number): number;
export function spSkeleton_findPathConstraint(a: number, b: number): number;
export function spSkeletonBinary_createWithLoader(a: number): number;
export function spSkeletonBinary_create(a: number): number;
export function _spSkeletonBinary_setError(a: number, b: number, c: number): void;
export function readFloat(a: number): number;
export function readString(a: number): number;
export function spSkeletonBinary_readAttachment(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function spSkeletonBinary_readSkin(a: number, b: number, c: number, d: number, e: number): number;
export function spSkeletonBinary_readSkeletonDataFile(a: number, b: number): number;
export function spSlotData_create(a: number, b: number, c: number): number;
export function spTransformConstraintData_create(a: number): number;
export function spSlotData_dispose(a: number): void;
export function _spMalloc(a: number, b: number, c: number): number;
export function spPolygon_create(a: number): number;
export function spPolygon_dispose(a: number): void;
export function spPolygon_containsPoint(a: number, b: number, c: number): number;
export function spPolygon_intersectsSegment(a: number, b: number, c: number, d: number, e: number): number;
export function spSkeletonBounds_create(): number;
export function spSkeletonBounds_dispose(a: number): void;
export function spSkeletonBounds_update(a: number, b: number, c: number): void;
export function spSkeletonBounds_aabbContainsPoint(a: number, b: number, c: number): number;
export function spSkeletonBounds_aabbIntersectsSegment(a: number, b: number, c: number, d: number, e: number): number;
export function spSkeletonBounds_aabbIntersectsSkeleton(a: number, b: number): number;
export function spSkeletonBounds_containsPoint(a: number, b: number, c: number): number;
export function spSkeletonBounds_intersectsSegment(a: number, b: number, c: number, d: number, e: number): number;
export function spSkeletonBounds_getPolygon(a: number, b: number): number;
export function spSkeletonClipping_create(): number;
export function spTriangulator_create(): number;
export function spTriangulator_dispose(a: number): void;
export function spTriangulator_triangulate(a: number, b: number): number;
export function spTriangulator_decompose(a: number, b: number, c: number): number;
export function spSkeletonClipping_clipEnd(a: number, b: number): void;
export function spSkeletonClipping_clipEnd2(a: number): void;
export function spSkeletonClipping_isClipping(a: number): number;
export function _clip(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function spSkeletonData_create(): number;
export function spSkeletonData_findBone(a: number, b: number): number;
export function spSkeletonData_findSlot(a: number, b: number): number;
export function spSkeletonData_findSkin(a: number, b: number): number;
export function spSkeletonData_findEvent(a: number, b: number): number;
export function spSkeletonData_findAnimation(a: number, b: number): number;
export function spSkeletonData_findIkConstraint(a: number, b: number): number;
export function spSkeletonData_findTransformConstraint(a: number, b: number): number;
export function spSkeletonData_findPathConstraint(a: number, b: number): number;
export function spSkeletonJson_createWithLoader(a: number): number;
export function spSkeletonJson_create(a: number): number;
export function _spSkeletonJson_setError(a: number, b: number, c: number, d: number): void;
export function findIkConstraintIndex(a: number, b: number, c: number, d: number): number;
export function findTransformConstraintIndex(a: number, b: number, c: number, d: number): number;
export function findPathConstraintIndex(a: number, b: number, c: number, d: number): number;
export function spSkeletonJson_readSkeletonDataFile(a: number, b: number): number;
export function spSkin_setAttachment(a: number, b: number, c: number, d: number): void;
export function _Entry_create(a: number, b: number, c: number): number;
export function spBoneDataArray_create(a: number): number;
export function spIkConstraintDataArray_create(a: number): number;
export function spTransformConstraintDataArray_create(a: number): number;
export function spPathConstraintDataArray_create(a: number): number;
export function _Entry_dispose(a: number): void;
export function spSkin_getAttachment(a: number, b: number, c: number): number;
export function spSkin_getAttachmentName(a: number, b: number, c: number): number;
export function spSkin_attachAll(a: number, b: number, c: number): void;
export function spSkin_getAttachments(a: number): number;
export function spSkin_clear(a: number): void;
export function spSlot_dispose(a: number): void;
export function spSlot_setAttachment(a: number, b: number): void;
export function spSlotData_setAttachmentName(a: number, b: number): void;
export function spTransformConstraint_update(a: number): void;
export function _spVertexAttachment_init(a: number): void;
export function _spInternalRandom(): number;
export function _spCalloc(a: number, b: number, c: number, d: number): number;
export function _spRealloc(a: number, b: number): number;
export function _spRandom(): number;
export function _spSetDebugMalloc(a: number): void;
export function _spSetMalloc(a: number): void;
export function _spSetRealloc(a: number): void;
export function _spSetFree(a: number): void;
export function _spSetRandom(a: number): void;
export function _spReadFile(a: number, b: number): number;
export function _spMath_random(a: number, b: number): number;
export function _spMath_randomTriangular(a: number, b: number): number;
export function _spMath_randomTriangularWith(a: number, b: number, c: number): number;
export function _spMath_interpolate(a: number, b: number, c: number, d: number): number;
export function _spMath_pow2_apply(a: number): number;
export function _spMath_pow2out_apply(a: number): number;
export function wgpu_compute_pass_set_bind_group(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_compute_pass_set_push_constant(a: number, b: number, c: number, d: number): void;
export function wgpu_render_bundle_set_bind_group(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_set_push_constants(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_set_bind_group(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_set_push_constants(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_set_pipeline(a: number, b: number): void;
export function wgpu_render_bundle_set_vertex_buffer(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_set_index_buffer(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_draw(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_draw_indexed(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function wgpu_render_bundle_draw_indirect(a: number, b: number, c: number): void;
export function wgpu_render_bundle_draw_indexed_indirect(a: number, b: number, c: number): void;
export function wgpu_render_bundle_pop_debug_group(a: number): void;
export function wgpu_render_bundle_insert_debug_marker(a: number, b: number): void;
export function wgpu_compute_pass_set_pipeline(a: number, b: number): void;
export function wgpu_compute_pass_dispatch_workgroups(a: number, b: number, c: number, d: number): void;
export function wgpu_compute_pass_dispatch_workgroups_indirect(a: number, b: number, c: number): void;
export function wgpu_compute_pass_push_debug_group(a: number, b: number, c: number): void;
export function wgpu_compute_pass_pop_debug_group(a: number): void;
export function wgpu_compute_pass_insert_debug_marker(a: number, b: number, c: number): void;
export function wgpu_compute_pass_write_timestamp(a: number, b: number, c: number): void;
export function wgpu_compute_pass_begin_pipeline_statistics_query(a: number, b: number, c: number): void;
export function wgpu_compute_pass_end_pipeline_statistics_query(a: number): void;
export function wgpu_render_pass_set_pipeline(a: number, b: number): void;
export function wgpu_render_pass_set_vertex_buffer(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_set_index_buffer(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_set_blend_constant(a: number, b: number): void;
export function wgpu_render_pass_set_stencil_reference(a: number, b: number): void;
export function wgpu_render_pass_set_viewport(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function wgpu_render_pass_set_scissor_rect(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_draw(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_draw_indexed(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function wgpu_render_pass_draw_indirect(a: number, b: number, c: number): void;
export function wgpu_render_pass_draw_indexed_indirect(a: number, b: number, c: number): void;
export function wgpu_render_pass_multi_draw_indirect(a: number, b: number, c: number, d: number): void;
export function wgpu_render_pass_multi_draw_indexed_indirect(a: number, b: number, c: number, d: number): void;
export function wgpu_render_pass_multi_draw_indirect_count(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function wgpu_render_pass_multi_draw_indexed_indirect_count(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function wgpu_render_pass_push_debug_group(a: number, b: number, c: number): void;
export function wgpu_render_pass_pop_debug_group(a: number): void;
export function wgpu_render_pass_insert_debug_marker(a: number, b: number, c: number): void;
export function wgpu_render_pass_write_timestamp(a: number, b: number, c: number): void;
export function wgpu_render_pass_begin_pipeline_statistics_query(a: number, b: number, c: number): void;
export function wgpu_render_pass_end_pipeline_statistics_query(a: number): void;
export function wgpu_render_pass_execute_bundles(a: number, b: number, c: number): void;
export function _ToEntry_dispose(a: number): void;
export function _spFree(a: number): void;
export function wgpu_render_bundle_push_debug_group(a: number, b: number): void;
export function _spEventQueue_addType(a: number, b: number): void;
export function _spEventQueue_addEvent(a: number, b: number): void;
export function spTrackEntryArray_add(a: number, b: number): void;
export function spTimelineArray_add(a: number, b: number): void;
export function spIntArray_add(a: number, b: number): void;
export function spArrayShortArray_add(a: number, b: number): void;
export function spTextureRegionArray_add(a: number, b: number): void;
export function spBoneDataArray_add(a: number, b: number): void;
export function spIkConstraintDataArray_add(a: number, b: number): void;
export function spTransformConstraintDataArray_add(a: number, b: number): void;
export function spPathConstraintDataArray_add(a: number, b: number): void;
export function spTrackEntryArray_addAll(a: number, b: number): void;
export function spTimelineArray_addAll(a: number, b: number): void;
export function spIntArray_addAll(a: number, b: number): void;
export function spArrayShortArray_addAll(a: number, b: number): void;
export function spTextureRegionArray_addAll(a: number, b: number): void;
export function spBoneDataArray_addAll(a: number, b: number): void;
export function spIkConstraintDataArray_addAll(a: number, b: number): void;
export function spTransformConstraintDataArray_addAll(a: number, b: number): void;
export function spPathConstraintDataArray_addAll(a: number, b: number): void;
export function spTrackEntryArray_setSize(a: number, b: number): number;
export function spTimelineArray_setSize(a: number, b: number): number;
export function spIntArray_setSize(a: number, b: number): number;
export function spFloatArray_setSize(a: number, b: number): number;
export function spArrayShortArray_setSize(a: number, b: number): number;
export function spTextureRegionArray_setSize(a: number, b: number): number;
export function spBoneDataArray_setSize(a: number, b: number): number;
export function spIkConstraintDataArray_setSize(a: number, b: number): number;
export function spTransformConstraintDataArray_setSize(a: number, b: number): number;
export function spPathConstraintDataArray_setSize(a: number, b: number): number;
export function spTrackEntryArray_contains(a: number, b: number): number;
export function spTimelineArray_contains(a: number, b: number): number;
export function spArrayShortArray_contains(a: number, b: number): number;
export function spTextureRegionArray_contains(a: number, b: number): number;
export function spBoneDataArray_contains(a: number, b: number): number;
export function spIkConstraintDataArray_contains(a: number, b: number): number;
export function spTransformConstraintDataArray_contains(a: number, b: number): number;
export function spPathConstraintDataArray_contains(a: number, b: number): number;
export function spSkeletonJson_dispose(a: number): void;
export function spTrackEntryArray_pop(a: number): number;
export function spTimelineArray_pop(a: number): number;
export function spIntArray_pop(a: number): number;
export function spArrayShortArray_pop(a: number): number;
export function spTextureRegionArray_pop(a: number): number;
export function spBoneDataArray_pop(a: number): number;
export function spIkConstraintDataArray_pop(a: number): number;
export function spTransformConstraintDataArray_pop(a: number): number;
export function spPathConstraintDataArray_pop(a: number): number;
export function spPathConstraintData_dispose(a: number): void;
export function spTransformConstraintData_dispose(a: number): void;
export function spUnsignedShortArray_setSize(a: number, b: number): number;
export function spRGBTimeline_setFrame(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function _spClippingAttachment_dispose(a: number): void;
export function spUnsignedShortArray_addAll(a: number, b: number): void;
export function spUnsignedShortArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function spTrackEntryArray_removeAt(a: number, b: number): void;
export function spTimelineArray_removeAt(a: number, b: number): void;
export function spUnsignedShortArray_removeAt(a: number, b: number): void;
export function spIntArray_removeAt(a: number, b: number): void;
export function spArrayShortArray_removeAt(a: number, b: number): void;
export function spTextureRegionArray_removeAt(a: number, b: number): void;
export function spBoneDataArray_removeAt(a: number, b: number): void;
export function spIkConstraintDataArray_removeAt(a: number, b: number): void;
export function spTransformConstraintDataArray_removeAt(a: number, b: number): void;
export function spPathConstraintDataArray_removeAt(a: number, b: number): void;
export function spTrackEntryArray_peek(a: number): number;
export function spTimelineArray_peek(a: number): number;
export function spIntArray_peek(a: number): number;
export function spArrayShortArray_peek(a: number): number;
export function spTextureRegionArray_peek(a: number): number;
export function spBoneDataArray_peek(a: number): number;
export function spIkConstraintDataArray_peek(a: number): number;
export function spTransformConstraintDataArray_peek(a: number): number;
export function spPathConstraintDataArray_peek(a: number): number;
export function spTrackEntryArray_ensureCapacity(a: number, b: number): void;
export function spTimelineArray_ensureCapacity(a: number, b: number): void;
export function spIntArray_ensureCapacity(a: number, b: number): void;
export function spUnsignedShortArray_ensureCapacity(a: number, b: number): void;
export function spFloatArray_ensureCapacity(a: number, b: number): void;
export function spArrayShortArray_ensureCapacity(a: number, b: number): void;
export function spTextureRegionArray_ensureCapacity(a: number, b: number): void;
export function spBoneDataArray_ensureCapacity(a: number, b: number): void;
export function spIkConstraintDataArray_ensureCapacity(a: number, b: number): void;
export function spTransformConstraintDataArray_ensureCapacity(a: number, b: number): void;
export function spPathConstraintDataArray_ensureCapacity(a: number, b: number): void;
export function spRotateTimeline_setFrame(a: number, b: number, c: number, d: number): void;
export function spTranslateXTimeline_setFrame(a: number, b: number, c: number, d: number): void;
export function spTranslateYTimeline_setFrame(a: number, b: number, c: number, d: number): void;
export function spScaleXTimeline_setFrame(a: number, b: number, c: number, d: number): void;
export function spScaleYTimeline_setFrame(a: number, b: number, c: number, d: number): void;
export function spShearXTimeline_setFrame(a: number, b: number, c: number, d: number): void;
export function spShearYTimeline_setFrame(a: number, b: number, c: number, d: number): void;
export function spCurveTimeline1_setFrame(a: number, b: number, c: number, d: number): void;
export function spPathConstraintPositionTimeline_setFrame(a: number, b: number, c: number, d: number): void;
export function spPathConstraintSpacingTimeline_setFrame(a: number, b: number, c: number, d: number): void;
export function spTranslateTimeline_setFrame(a: number, b: number, c: number, d: number, e: number): void;
export function spScaleTimeline_setFrame(a: number, b: number, c: number, d: number, e: number): void;
export function spShearTimeline_setFrame(a: number, b: number, c: number, d: number, e: number): void;
export function spTimelineArray_dispose(a: number): void;
export function spTrackEntryArray_dispose(a: number): void;
export function spPropertyIdArray_dispose(a: number): void;
export function spIntArray_dispose(a: number): void;
export function spShortArray_dispose(a: number): void;
export function spUnsignedShortArray_dispose(a: number): void;
export function spFloatArray_dispose(a: number): void;
export function spArrayShortArray_dispose(a: number): void;
export function spKeyValueArray_dispose(a: number): void;
export function spBoneData_dispose(a: number): void;
export function spEvent_dispose(a: number): void;
export function spIkConstraint_dispose(a: number): void;
export function spTextureRegionArray_dispose(a: number): void;
export function spSequence_dispose(a: number): void;
export function spBoneDataArray_dispose(a: number): void;
export function spIkConstraintDataArray_dispose(a: number): void;
export function spTransformConstraintDataArray_dispose(a: number): void;
export function spPathConstraintDataArray_dispose(a: number): void;
export function spTransformConstraint_dispose(a: number): void;
export function spTimelineArray_clear(a: number): void;
export function spTrackEntryArray_clear(a: number): void;
export function spPropertyIdArray_clear(a: number): void;
export function spIntArray_clear(a: number): void;
export function spShortArray_clear(a: number): void;
export function spUnsignedShortArray_clear(a: number): void;
export function spFloatArray_clear(a: number): void;
export function spArrayShortArray_clear(a: number): void;
export function spKeyValueArray_clear(a: number): void;
export function spTextureRegionArray_clear(a: number): void;
export function spBoneDataArray_clear(a: number): void;
export function spIkConstraintDataArray_clear(a: number): void;
export function spTransformConstraintDataArray_clear(a: number): void;
export function spPathConstraintDataArray_clear(a: number): void;
export function spTrackEntryArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function spTimelineArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function spIntArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function spArrayShortArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function spTextureRegionArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function spBoneDataArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function spIkConstraintDataArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function spTransformConstraintDataArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function spPathConstraintDataArray_addAllValues(a: number, b: number, c: number, d: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function wasm_bindgen__convert__closures__invoke1_mut__h0b4babd64eba9ac0(a: number, b: number, c: number): void;
export function wasm_bindgen__convert__closures__invoke0_mut__h697af02a6c372d84(a: number, b: number): void;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_start(): void;
